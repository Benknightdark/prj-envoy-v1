// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: services/grpc-v1/protos/service_ip_mapping.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterInfo) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type ServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *ClusterInfo `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ServiceRequest) Reset() {
	*x = ServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRequest) ProtoMessage() {}

func (x *ServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRequest.ProtoReflect.Descriptor instead.
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceRequest) GetCluster() *ClusterInfo {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *ClusterInfo `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Name    string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ip      string       `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescGZIP(), []int{2}
}

func (x *Service) GetCluster() *ClusterInfo {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type GeneralReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GeneralReply) Reset() {
	*x = GeneralReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralReply) ProtoMessage() {}

func (x *GeneralReply) ProtoReflect() protoreflect.Message {
	mi := &file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralReply.ProtoReflect.Descriptor instead.
func (*GeneralReply) Descriptor() ([]byte, []int) {
	return file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescGZIP(), []int{3}
}

func (x *GeneralReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_services_grpc_v1_protos_service_ip_mapping_proto protoreflect.FileDescriptor

var file_services_grpc_v1_protos_service_ip_mapping_proto_rawDesc = []byte{
	0x0a, 0x30, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x37, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x3f, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x22, 0x28, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xab, 0x02, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x3e, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x45, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x70, 0x72, 0x6a, 0x2d, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2d, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescOnce sync.Once
	file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescData = file_services_grpc_v1_protos_service_ip_mapping_proto_rawDesc
)

func file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescGZIP() []byte {
	file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescOnce.Do(func() {
		file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescData)
	})
	return file_services_grpc_v1_protos_service_ip_mapping_proto_rawDescData
}

var file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_services_grpc_v1_protos_service_ip_mapping_proto_goTypes = []interface{}{
	(*ClusterInfo)(nil),    // 0: protos.ClusterInfo
	(*ServiceRequest)(nil), // 1: protos.ServiceRequest
	(*Service)(nil),        // 2: protos.Service
	(*GeneralReply)(nil),   // 3: protos.GeneralReply
}
var file_services_grpc_v1_protos_service_ip_mapping_proto_depIdxs = []int32{
	0, // 0: protos.ServiceRequest.cluster:type_name -> protos.ClusterInfo
	0, // 1: protos.Service.cluster:type_name -> protos.ClusterInfo
	1, // 2: protos.ServiceIPMapping.QueryServiceUnary:input_type -> protos.ServiceRequest
	1, // 3: protos.ServiceIPMapping.QueryServiceServerStream:input_type -> protos.ServiceRequest
	1, // 4: protos.ServiceIPMapping.QueryServiceClientStream:input_type -> protos.ServiceRequest
	1, // 5: protos.ServiceIPMapping.QueryServiceBiStream:input_type -> protos.ServiceRequest
	2, // 6: protos.ServiceIPMapping.QueryServiceUnary:output_type -> protos.Service
	2, // 7: protos.ServiceIPMapping.QueryServiceServerStream:output_type -> protos.Service
	2, // 8: protos.ServiceIPMapping.QueryServiceClientStream:output_type -> protos.Service
	2, // 9: protos.ServiceIPMapping.QueryServiceBiStream:output_type -> protos.Service
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_services_grpc_v1_protos_service_ip_mapping_proto_init() }
func file_services_grpc_v1_protos_service_ip_mapping_proto_init() {
	if File_services_grpc_v1_protos_service_ip_mapping_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_grpc_v1_protos_service_ip_mapping_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_grpc_v1_protos_service_ip_mapping_proto_goTypes,
		DependencyIndexes: file_services_grpc_v1_protos_service_ip_mapping_proto_depIdxs,
		MessageInfos:      file_services_grpc_v1_protos_service_ip_mapping_proto_msgTypes,
	}.Build()
	File_services_grpc_v1_protos_service_ip_mapping_proto = out.File
	file_services_grpc_v1_protos_service_ip_mapping_proto_rawDesc = nil
	file_services_grpc_v1_protos_service_ip_mapping_proto_goTypes = nil
	file_services_grpc_v1_protos_service_ip_mapping_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceIPMappingClient is the client API for ServiceIPMapping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceIPMappingClient interface {
	QueryServiceUnary(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Service, error)
	QueryServiceServerStream(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (ServiceIPMapping_QueryServiceServerStreamClient, error)
	QueryServiceClientStream(ctx context.Context, opts ...grpc.CallOption) (ServiceIPMapping_QueryServiceClientStreamClient, error)
	QueryServiceBiStream(ctx context.Context, opts ...grpc.CallOption) (ServiceIPMapping_QueryServiceBiStreamClient, error)
}

type serviceIPMappingClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceIPMappingClient(cc grpc.ClientConnInterface) ServiceIPMappingClient {
	return &serviceIPMappingClient{cc}
}

func (c *serviceIPMappingClient) QueryServiceUnary(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/protos.ServiceIPMapping/QueryServiceUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceIPMappingClient) QueryServiceServerStream(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (ServiceIPMapping_QueryServiceServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceIPMapping_serviceDesc.Streams[0], "/protos.ServiceIPMapping/QueryServiceServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceIPMappingQueryServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceIPMapping_QueryServiceServerStreamClient interface {
	Recv() (*Service, error)
	grpc.ClientStream
}

type serviceIPMappingQueryServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *serviceIPMappingQueryServiceServerStreamClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceIPMappingClient) QueryServiceClientStream(ctx context.Context, opts ...grpc.CallOption) (ServiceIPMapping_QueryServiceClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceIPMapping_serviceDesc.Streams[1], "/protos.ServiceIPMapping/QueryServiceClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceIPMappingQueryServiceClientStreamClient{stream}
	return x, nil
}

type ServiceIPMapping_QueryServiceClientStreamClient interface {
	Send(*ServiceRequest) error
	CloseAndRecv() (*Service, error)
	grpc.ClientStream
}

type serviceIPMappingQueryServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *serviceIPMappingQueryServiceClientStreamClient) Send(m *ServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceIPMappingQueryServiceClientStreamClient) CloseAndRecv() (*Service, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceIPMappingClient) QueryServiceBiStream(ctx context.Context, opts ...grpc.CallOption) (ServiceIPMapping_QueryServiceBiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceIPMapping_serviceDesc.Streams[2], "/protos.ServiceIPMapping/QueryServiceBiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceIPMappingQueryServiceBiStreamClient{stream}
	return x, nil
}

type ServiceIPMapping_QueryServiceBiStreamClient interface {
	Send(*ServiceRequest) error
	Recv() (*Service, error)
	grpc.ClientStream
}

type serviceIPMappingQueryServiceBiStreamClient struct {
	grpc.ClientStream
}

func (x *serviceIPMappingQueryServiceBiStreamClient) Send(m *ServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceIPMappingQueryServiceBiStreamClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceIPMappingServer is the server API for ServiceIPMapping service.
type ServiceIPMappingServer interface {
	QueryServiceUnary(context.Context, *ServiceRequest) (*Service, error)
	QueryServiceServerStream(*ServiceRequest, ServiceIPMapping_QueryServiceServerStreamServer) error
	QueryServiceClientStream(ServiceIPMapping_QueryServiceClientStreamServer) error
	QueryServiceBiStream(ServiceIPMapping_QueryServiceBiStreamServer) error
}

// UnimplementedServiceIPMappingServer can be embedded to have forward compatible implementations.
type UnimplementedServiceIPMappingServer struct {
}

func (*UnimplementedServiceIPMappingServer) QueryServiceUnary(context.Context, *ServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryServiceUnary not implemented")
}
func (*UnimplementedServiceIPMappingServer) QueryServiceServerStream(*ServiceRequest, ServiceIPMapping_QueryServiceServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryServiceServerStream not implemented")
}
func (*UnimplementedServiceIPMappingServer) QueryServiceClientStream(ServiceIPMapping_QueryServiceClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryServiceClientStream not implemented")
}
func (*UnimplementedServiceIPMappingServer) QueryServiceBiStream(ServiceIPMapping_QueryServiceBiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryServiceBiStream not implemented")
}

func RegisterServiceIPMappingServer(s *grpc.Server, srv ServiceIPMappingServer) {
	s.RegisterService(&_ServiceIPMapping_serviceDesc, srv)
}

func _ServiceIPMapping_QueryServiceUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceIPMappingServer).QueryServiceUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ServiceIPMapping/QueryServiceUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceIPMappingServer).QueryServiceUnary(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceIPMapping_QueryServiceServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceIPMappingServer).QueryServiceServerStream(m, &serviceIPMappingQueryServiceServerStreamServer{stream})
}

type ServiceIPMapping_QueryServiceServerStreamServer interface {
	Send(*Service) error
	grpc.ServerStream
}

type serviceIPMappingQueryServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *serviceIPMappingQueryServiceServerStreamServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceIPMapping_QueryServiceClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceIPMappingServer).QueryServiceClientStream(&serviceIPMappingQueryServiceClientStreamServer{stream})
}

type ServiceIPMapping_QueryServiceClientStreamServer interface {
	SendAndClose(*Service) error
	Recv() (*ServiceRequest, error)
	grpc.ServerStream
}

type serviceIPMappingQueryServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *serviceIPMappingQueryServiceClientStreamServer) SendAndClose(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceIPMappingQueryServiceClientStreamServer) Recv() (*ServiceRequest, error) {
	m := new(ServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceIPMapping_QueryServiceBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceIPMappingServer).QueryServiceBiStream(&serviceIPMappingQueryServiceBiStreamServer{stream})
}

type ServiceIPMapping_QueryServiceBiStreamServer interface {
	Send(*Service) error
	Recv() (*ServiceRequest, error)
	grpc.ServerStream
}

type serviceIPMappingQueryServiceBiStreamServer struct {
	grpc.ServerStream
}

func (x *serviceIPMappingQueryServiceBiStreamServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceIPMappingQueryServiceBiStreamServer) Recv() (*ServiceRequest, error) {
	m := new(ServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ServiceIPMapping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ServiceIPMapping",
	HandlerType: (*ServiceIPMappingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryServiceUnary",
			Handler:    _ServiceIPMapping_QueryServiceUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryServiceServerStream",
			Handler:       _ServiceIPMapping_QueryServiceServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryServiceClientStream",
			Handler:       _ServiceIPMapping_QueryServiceClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "QueryServiceBiStream",
			Handler:       _ServiceIPMapping_QueryServiceBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/grpc-v1/protos/service_ip_mapping.proto",
}
